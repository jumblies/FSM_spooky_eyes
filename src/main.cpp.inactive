#include <Arduino.h>
#define FASTLED_ALLOW_INTERRUPTS 0 // Fixes glitchingon WS2811
#include <ArduinoOTA.h>
#include <ESP8266WiFi.h>
#include <FastLED.h>
#include "secrets.h"
FASTLED_USING_NAMESPACE
#if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)
#warning "Requires FastLED 3.1 or later; check github for latest code."
#endif

#define LED_TYPE WS2811
#define COLOR_ORDER RGB
#define NUM_LEDS 50
#define DATA_PIN D4
#define BRIGHTNESS 96
#define FRAMES_PER_SECOND 30
CRGB leds[NUM_LEDS];

void showStrip()
{
  FastLED.show();
}

void setPixel(int Pixel, byte red, byte green, byte blue)
{
  // FastLED
  leds[Pixel].r = red;
  leds[Pixel].g = green;
  leds[Pixel].b = blue;
}

void setAll(byte red, byte green, byte blue)
{
  for (int i = 0; i < NUM_LEDS; i++)
  {
    setPixel(i, red, green, blue);
  }
  showStrip();
}

void HalloweenEyes(byte red, byte green, byte blue,
                   int EyeWidth, int EyeSpace,
                   boolean Fade, int Steps, int FadeDelay,
                   int EndPause)
{
  randomSeed(analogRead(0));

  int i;
  int StartPoint = random(0, NUM_LEDS/2 - (2 * EyeWidth) - EyeSpace);
  int Start2ndEye = StartPoint + EyeWidth + EyeSpace;
  int secondStartPoint = StartPoint + random(10, 20);
  int secondStart2ndEye = secondStartPoint + EyeWidth + EyeSpace;



  for (i = 0; i < EyeWidth; i++)
  {
    setPixel(StartPoint + i, red, green, blue);
    setPixel(Start2ndEye + i, red, green, blue);
    //second set of eyes.
    setPixel(secondStartPoint + i, red, green, blue);
    setPixel(secondStart2ndEye + i, red, green, blue);
  }

  showStrip();

  if (Fade == true)
  {
    float r, g, b;

    for (int j = Steps; j >= 0; j--)
    {
      r = j * (red / Steps);
      g = j * (green / Steps);
      b = j * (blue / Steps);

      for (i = 0; i < EyeWidth; i++)
      {
        setPixel(StartPoint + i, r, g, b);
        setPixel(Start2ndEye + i, r, g, b);
        setPixel(secondStartPoint + i, r, g, b);
        setPixel(secondStart2ndEye + i, r, g, b);
      }

      showStrip();
      delay(FadeDelay);
    }
  }

  setAll(0, 0, 0); // Set all black

  delay(EndPause);
}

void setup()
{
  delay(3000); // 3 second delay for recovery
  WiFi.setSleepMode(WIFI_NONE_SLEEP);
  WiFi.config(ip, gateway, subnet);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  WiFi.mode(WIFI_STA);
  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  //FastLED.addLeds<LED_TYPE,DATA_PIN,CLK_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);

  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);
  ArduinoOTA.setHostname("ESPWEB");
  // Delay necessary to get ack from upload
  ArduinoOTA.onStart([]() {});
  ArduinoOTA.onEnd([]() { delay(500); });

  ArduinoOTA.onError([](ota_error_t error) {
    (void)error;
    ESP.restart();
  });
  /* setup the OTA server */
  ArduinoOTA.begin();
}

void loop()
{
  // Fixed:
  // HalloweenEyes(0xff, 0x00, 0x00, 1,4, true, 10, 80, 3000);
  // or Random:
  HalloweenEyes(0xff, 0x00, 0x00,
                1, 1,
                true, random(5, 50), random(50, 150),
                random(1000, 1000));
  ArduinoOTA.handle();
}
